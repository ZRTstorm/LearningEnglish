package com.example.learningenglish.ui.record

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ExpandLess
import androidx.compose.material.icons.filled.ExpandMore
import androidx.compose.material.icons.filled.HelpOutline
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.learningenglish.viewmodel.LearningViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PronunciationHistoryScreen(
    viewModel: LearningViewModel,
    navController: NavController,
    userId: Int,
    contentType: String,
    contentId: Int
) {
    val history by viewModel.pronunciationHistory.collectAsState()
    var expandedId by remember { mutableStateOf<Int?>(null) }
    var expandedMetric by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(Unit) {
        viewModel.loadPronunciationHistory(userId, contentType, contentId)
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("üìù Î∞úÏùå ÌèâÍ∞Ä Í∏∞Î°ù") })
        }
    ) { padding ->
        LazyColumn(
            modifier = Modifier.padding(padding).padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            items(history) { item ->
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF9F9F9))
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text("Î¨∏Ïû•: ${item.sentenceId}", style = MaterialTheme.typography.bodyMedium)

                        Spacer(modifier = Modifier.height(8.dp))

                        TextButton(
                            onClick = {
                                expandedId = if (expandedId == item.sentenceId) null else item.sentenceId
                                expandedMetric = null
                            },
                            modifier = Modifier.align(Alignment.End)
                        ) {
                            Text(if (expandedId == item.sentenceId) "Îã´Í∏∞" else "ÏûêÏÑ∏Ìûà")
                            Spacer(Modifier.width(4.dp))
                            Icon(
                                imageVector = if (expandedId == item.sentenceId) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                contentDescription = null
                            )
                        }

                        if (expandedId == item.sentenceId) {
                            Spacer(modifier = Modifier.height(8.dp))

                            val metricKeys = listOf("Ï†ïÌôïÎèÑ", "Ïú†Ï∞ΩÏÑ±", "ÏôÑÏÑ±ÎèÑ", "Ï¥ùÏ†ê")
                            val scores = listOf(item.accuracyScore, item.fluencyScore, item.completenessScore, item.pronunciationScore)
                            val descriptions = listOf(
                                "Î∞úÏùåÏù¥ Ï†ïÌôïÌñàÎäîÍ∞Ä",
                                "ÎßêÏù¥ ÎÅäÍπÄ ÏóÜÏù¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥Ï°åÎäîÍ∞Ä",
                                "Îã®Ïñ¥Î•º Î™®Îëê Î∞úÏùåÌñàÎäîÍ∞Ä",
                                "Ï†ÑÏ≤¥ Ï¢ÖÌï© ÌèâÍ∞Ä Ï†êÏàò"
                            )

                            val descriptionVisibleMap = remember { mutableStateMapOf<String, Boolean>() }

                            metricKeys.forEachIndexed { index, label ->
                                val score = scores[index]
                                val description = descriptions[index]
                                val isVisible = descriptionVisibleMap[label] ?: false

                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .background(Color(0xFFF2F2F2), RoundedCornerShape(8.dp))
                                        .padding(12.dp)
                                ) {
                                    Row(
                                        verticalAlignment = Alignment.CenterVertically,
                                        horizontalArrangement = Arrangement.SpaceBetween,
                                        modifier = Modifier.fillMaxWidth()
                                    ) {
                                        Row(verticalAlignment = Alignment.CenterVertically) {
                                            Text(label, style = MaterialTheme.typography.labelMedium)
                                            Spacer(modifier = Modifier.width(8.dp))
                                            Text("(${score.toInt()}Ï†ê)", style = MaterialTheme.typography.bodySmall)

                                            Spacer(modifier = Modifier.width(8.dp))
                                            Text("‚ùï", modifier = Modifier.clickable {
                                                descriptionVisibleMap[label] = !isVisible
                                            })
                                        }
                                    }

                                    LinearProgressIndicator(
                                        progress = (score.toFloat() / 100f).coerceIn(0f, 1f),
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(6.dp)
                                            .padding(vertical = 4.dp),
                                        color = Color(0xFF6D9886)
                                    )

                                    if (isVisible) {
                                        Spacer(modifier = Modifier.height(4.dp))
                                        Text(description, style = MaterialTheme.typography.bodySmall, color = Color.Gray)
                                    }
                                }

                                Spacer(modifier = Modifier.height(8.dp))
                            }


                            /*
                            listOf(
                                Triple("Ï†ïÌôïÎèÑ", item.accuracyScore, "Î∞úÏùåÏù¥ Ï†ïÌôïÌñàÎäîÍ∞Ä"),
                                Triple("Ïú†Ï∞ΩÏÑ±", item.fluencyScore, "ÎßêÏù¥ ÎÅäÍπÄ ÏóÜÏù¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥Ï°åÎäîÍ∞Ä"),
                                Triple("ÏôÑÏÑ±ÎèÑ", item.completenessScore, "Îã®Ïñ¥Î•º Î™®Îëê Î∞úÏùåÌñàÎäîÍ∞Ä"),
                                Triple("Ï¥ùÏ†ê", item.pronunciationScore, "Ï†ÑÏ≤¥ Ï¢ÖÌï© ÌèâÍ∞Ä Ï†êÏàò")
                            ).forEach { (label, score, description) ->
                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .background(Color(0xFFF2F2F2), RoundedCornerShape(8.dp))
                                        .clickable {
                                            expandedMetric = if (expandedMetric == label) null else label
                                        }
                                        .padding(12.dp)
                                ) {
                                    Row(verticalAlignment = Alignment.CenterVertically) {
                                        Text(label, style = MaterialTheme.typography.titleSmall)
                                        Spacer(modifier = Modifier.width(6.dp))
                                        Icon(
                                            imageVector = Icons.Default.HelpOutline,
                                            contentDescription = "ÎèÑÏõÄÎßê",
                                            tint = Color.Gray
                                        )
                                    }
                                    LinearProgressIndicator(
                                        progress = (score.toFloat() / 100f).coerceIn(0f, 1f),
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(6.dp)
                                            .padding(vertical = 6.dp),
                                        color = Color(0xFF6D9886)
                                    )
                                    Text("${score.toInt()}Ï†ê", style = MaterialTheme.typography.bodySmall)

                                    if (expandedMetric == label) {
                                        Spacer(modifier = Modifier.height(4.dp))
                                        Box(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .background(Color.White, RoundedCornerShape(6.dp))
                                                .padding(10.dp)
                                        ) {
                                            Text("! $description", style = MaterialTheme.typography.bodyMedium)
                                        }
                                    }
                                }

                                Spacer(modifier = Modifier.height(8.dp))
                            }*/

                            Text("üí¨ ÌîºÎìúÎ∞±:", style = MaterialTheme.typography.labelMedium)
                            item.feedback.raw.lines().take(3).forEach { msg ->
                                Text("- $msg", style = MaterialTheme.typography.bodySmall)
                            }

                            Spacer(modifier = Modifier.height(8.dp))
                            Text("ÌèâÍ∞Ä ÏãúÍ∞Å: ${item.evaluatedAt}", style = MaterialTheme.typography.bodySmall, color = Color.Gray)
                        }
                    }
                }
            }
        }
    }
}
/*
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PronunciationHistoryScreen(
    viewModel: LearningViewModel,
    navController: NavController,
    userId: Int,
    contentType: String,
    contentId: Int
) {
    val history by viewModel.pronunciationHistory.collectAsState()
    var expandedId by remember { mutableStateOf<Int?>(null) }


    LaunchedEffect(Unit) {
        viewModel.loadPronunciationHistory(userId, contentType, contentId)
    }

    Scaffold(
        topBar = {
            TopAppBar(title = { Text("üìù Î∞úÏùå ÌèâÍ∞Ä Í∏∞Î°ù") })
        }
    ) { padding ->
        LazyColumn(modifier = Modifier.padding(padding).padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            items(history) { item ->
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    shape = RoundedCornerShape(12.dp),
                    colors = CardDefaults.cardColors(containerColor = Color(0xFFF9F9F9))
                ) {
                    Column(modifier = Modifier.padding(16.dp)) {
                        Text("Î¨∏Ïû•: ${item.sentenceId}", style = MaterialTheme.typography.bodyMedium)

                        Spacer(modifier = Modifier.height(8.dp))

                        TextButton(
                            onClick = {
                                expandedId = if (expandedId == item.sentenceId) null else item.sentenceId
                            },
                            modifier = Modifier.align(Alignment.End)
                        ) {
                            Text(if (expandedId == item.sentenceId) "Îã´Í∏∞" else "ÏûêÏÑ∏Ìûà")
                            Spacer(Modifier.width(4.dp))
                            Icon(
                                imageVector = if (expandedId == item.sentenceId) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                                contentDescription = null
                            )
                        }

                        if (expandedId == item.sentenceId) {
                            Spacer(modifier = Modifier.height(8.dp))

                            listOf(
                                Triple("Ï†ïÌôïÎèÑ", item.accuracyScore, "Î∞úÏùåÏù¥ Ï†ïÌôïÌñàÎäîÍ∞Ä"),
                                Triple("Ïú†Ï∞ΩÏÑ±", item.fluencyScore, "ÎßêÏù¥ ÎÅäÍπÄ ÏóÜÏù¥ ÏûêÏó∞Ïä§ÎüΩÍ≤å Ïù¥Ïñ¥Ï°åÎäîÍ∞Ä"),
                                Triple("ÏôÑÏÑ±ÎèÑ", item.completenessScore, "Îã®Ïñ¥Î•º Î™®Îëê Î∞úÏùåÌñàÎäîÍ∞Ä"),
                                Triple("Ï¥ùÏ†ê", item.pronunciationScore, "Ï†ÑÏ≤¥ Ï¢ÖÌï© ÌèâÍ∞Ä Ï†êÏàò")
                            ).forEach { (label, score, description) ->
                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .background(Color(0xFFF2F2F2), RoundedCornerShape(8.dp))
                                        .padding(12.dp)
                                ) {
                                    Text("$label", style = MaterialTheme.typography.labelMedium)
                                    LinearProgressIndicator(
                                        progress = (score.toFloat() / 100f).coerceIn(0f, 1f),
                                        modifier = Modifier
                                            .fillMaxWidth()
                                            .height(6.dp)
                                            .padding(vertical = 4.dp),
                                        color = Color(0xFF6D9886)
                                    )
                                    //
                                    //Text(description, style = MaterialTheme.typography.bodySmall, color = Color.Gray)
                                }

                                Spacer(modifier = Modifier.height(8.dp))
                            }

                            Text("üí¨ ÌîºÎìúÎ∞±:", style = MaterialTheme.typography.labelMedium)
                            item.feedback.raw.lines().take(3).forEach { msg ->
                                Text("- $msg", style = MaterialTheme.typography.bodySmall)
                            }

                            Spacer(modifier = Modifier.height(8.dp))
                            Text("ÌèâÍ∞Ä ÏãúÍ∞Å: ${item.evaluatedAt}", style = MaterialTheme.typography.bodySmall, color = Color.Gray)
                        }
                    }
                }
            }
        }
    }
}
*/
