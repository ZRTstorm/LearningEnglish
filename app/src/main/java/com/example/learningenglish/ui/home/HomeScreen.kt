package com.example.learningenglish.ui.home

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.material3.Card
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.Alignment
import androidx.compose.ui.unit.dp
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import com.example.learningenglish.R
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.LinearProgressIndicator
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import androidx.compose.material3.TextButton
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.rememberCoroutineScope
import androidx.compose.runtime.setValue
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.NavHost
import com.example.learningenglish.ui.ScreenNavigation.BottomNavItem
import com.example.learningenglish.ui.ScreenNavigation.BottomNavigationBar
import com.example.learningenglish.ui.mypage.MyPageScreen
import com.example.learningenglish.ui.recommendation.LibraryScreen
import com.example.learningenglish.viewmodel.AuthViewModel
import com.example.learningenglish.viewmodel.LearningViewModel
import kotlinx.coroutines.launch


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun HomeScreen(
    navController: NavController,
    viewModel: AuthViewModel
) {
    var showGoalDialog by remember { mutableStateOf(false) }
    var showLearningTypeDialog by remember { mutableStateOf(false) }
    var selectedLearningType by remember { mutableStateOf("") }
    var goalHours by remember { mutableStateOf(0) }
    var goalMinutes by remember { mutableStateOf(0) }
    var elapsedTimeInMinutes by remember { mutableStateOf(0) }
    var showDialog by remember { mutableStateOf(false) }

    val items = listOf(
        BottomNavItem.Home,
        BottomNavItem.Library,
        BottomNavItem.MyPage
    )

    val snackbarHostState = remember{ SnackbarHostState()}
    val coroutineScope = rememberCoroutineScope()

    val encouragementMessages = listOf(
        "Ïò§ÎäòÎèÑ ÌûòÎÇ¥Ïöî! üöÄ",
        "Î©ãÏßÑ ÏãúÏûëÏûÖÎãàÎã§! ‚ú®",
        "Ìïú Í±∏ÏùåÏî© ÎÇòÏïÑÍ∞ÄÏöî! üèÉ",
        "ÏÑ±Í≥µÏ†ÅÏù∏ ÌïôÏäµÏùÑ ÏùëÏõêÌï©ÎãàÎã§! üìö",
        "ÏµúÍ≥†ÏòàÏöî! Í≥ÑÏÜç ÌûòÎÇ¥Ïöî! üí™"
    )

    Scaffold(
        containerColor = Color(0xFFF0F4FF),
        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },
        topBar = {
            TopAppBar(
                title = {
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Image(
                            painter = painterResource(id = R.drawable.ic_logo),
                            contentDescription = "Ïï± Î°úÍ≥†",
                            modifier = Modifier
                                .height(32.dp)
                                .padding(end = 8.dp)
                        )
                        Text(
                            text = "LearningApp",
                            style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),
                            color = Color.Black
                        )

                    }
                },
                navigationIcon = {
                    IconButton(onClick = {
                        navController.popBackStack()
                    }) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack, // Í∏∞Î≥∏ ÏôºÏ™Ω ÌôîÏÇ¥Ìëú ÏïÑÏù¥ÏΩò
                            contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞"
                        )
                    }
                },
                actions = {
                    IconButton(onClick = { showDialog = true }) {
                        Icon(
                            painter = painterResource(id = R.drawable.ic_logout), // Î°úÍ∑∏ÏïÑÏõÉ ÏïÑÏù¥ÏΩò (Ïòà: Î¨∏ Ï∂úÍµ¨ Î™®Ïñë)
                            contentDescription = "Î°úÍ∑∏ÏïÑÏõÉ",
                            tint = Color.Black
                        )
                    }
                },
                modifier = Modifier.height(56.dp),
                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
                    containerColor = Color.White,
                    titleContentColor = Color.Black
                )
            )
            if (showDialog) {
                AlertDialog(
                    onDismissRequest = { showDialog = false },
                    title = { Text("Î°úÍ∑∏ÏïÑÏõÉ") },
                    text = { Text("Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?") },
                    confirmButton = {
                        TextButton(onClick = {
                            showDialog = false
                            viewModel.logout()
                            navController.navigate("login") {
                                popUpTo("home") { inclusive = true }
                            }
                        }) {
                            Text("Ïòà")
                        }
                    },
                    dismissButton = {
                        TextButton(onClick = { showDialog = false }) {
                            Text("ÏïÑÎãàÏò§")
                        }
                    }
                )
            }
        },
        bottomBar = {
            BottomNavigationBar(navController = navController, items = items)
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .navigationBarsPadding()
        ) {
            // ÌîÑÎ°úÌïÑ Ïπ¥Îìú
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp),
                shape = RoundedCornerShape(16.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp),
                    horizontalAlignment = Alignment.Start
                ) {
                    ProfileSection()
                }
            }
            TodayLearningProgress(
                goalHours = goalHours,
                goalMinutes = goalMinutes,
                elapsedTimeInMinutes = elapsedTimeInMinutes
            ) // Ïòà: 60% ÏôÑÎ£å

            // ÌïôÏäµÌïòÍ∏∞ Î≤ÑÌäº
            StartLearningButton {
                showGoalDialog = true
            }

            Spacer(modifier = Modifier.height(24.dp))

            // ÌïôÏäµ ÌòÑÌô© ÏÑπÏÖò
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    LearningStatusSection()
                }
            }

            // Î™©Ìëú ÏÑ§Ï†ï Dialog
            if (showGoalDialog) {
                GoalSettingDialog(
                    onConfirm = { hours, minutes ->
                        goalHours = hours
                        goalMinutes = minutes
                        showGoalDialog = false
                        showLearningTypeDialog = true
                    },
                    onDismiss = { showGoalDialog = false }
                )
            }

            // ÌïôÏäµÏú†Ìòï ÏÑ†ÌÉù Dialog
            if (showLearningTypeDialog) {
                LearningTypeSelectionDialog(
                    onConfirm = { type ->
                        selectedLearningType = type
                        navController.navigate("learningstart/${goalHours}/${goalMinutes}/${type}")
                        showLearningTypeDialog = false
                        coroutineScope.launch {
                            snackbarHostState.showSnackbar(
                                message = encouragementMessages.random(),
                                actionLabel = "ÌôïÏù∏"
                            )
                        }
                    },
                    onDismiss = { showLearningTypeDialog = false }
                )
            }
        }

    }
}

@Composable
fun ProfileSection() {
    Row(verticalAlignment = Alignment.CenterVertically) {
        Image(
            painter = painterResource(id = R.drawable.ic_profile_boy),
            contentDescription = "ÌîÑÎ°úÌïÑ",
            modifier = Modifier
                .size(48.dp)
                .clip(CircleShape)
                .background(Color.Gray)
        )
        Spacer(modifier = Modifier.width(12.dp))
        Text(
            text = "ÌôçÍ∏∏ÎèôÎãò",
            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)
        )
    }
}

@Composable
fun StartLearningButton(onClick: () -> Unit) {
    Button(
        onClick = onClick,
        modifier = Modifier
            .fillMaxWidth()
            .height(56.dp),
        shape = RoundedCornerShape(12.dp)
    ) {
        Text("ÌïôÏäµÌïòÍ∏∞", style = MaterialTheme.typography.titleMedium)
    }
}

@Composable
fun TodayLearningProgress(goalHours: Int, goalMinutes: Int, elapsedTimeInMinutes: Int) {
    // Î™©Ìëú ÏãúÍ∞ÑÏùÑ Î∂Ñ Îã®ÏúÑÎ°ú Î≥ÄÌôò
    val totalGoalMinutes = goalHours * 60 + goalMinutes

    // Í≤ΩÍ≥ºÎêú ÏãúÍ∞ÑÍ≥º Î™©Ìëú ÏãúÍ∞ÑÏùÑ ÎπÑÍµêÌïòÏó¨ ÏßÑÌñâÎ•† Í≥ÑÏÇ∞
    val progress = (elapsedTimeInMinutes.toFloat() / totalGoalMinutes) // 0.0f ~ 1.0f ÏÇ¨Ïù¥Ïùò Í∞í

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Ïò§Îäò ÌïôÏäµ ÏßÑÌñâÎ•†",
            style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)
        )
        Spacer(modifier = Modifier.height(8.dp))
        LinearProgressIndicator(
            progress = progress,
            modifier = Modifier
                .fillMaxWidth()
                .height(10.dp),
            color = Color(0xFF3F51B5),
            trackColor = Color(0xFFE0E0E0)
        )
        Spacer(modifier = Modifier.height(4.dp))
        // ÏßÑÌñâÎ•†ÏùÑ ÌçºÏÑºÌä∏Î°ú ÌëúÏãú
        val percentage = (progress * 100).toInt()
        Text(text = "$percentage% ÏôÑÎ£å")
    }
}







